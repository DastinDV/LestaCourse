#version 330 core
                          
in vec3 out_position;

uniform vec4 u_color;

uniform vec2 u_windowSize;
uniform float u_time;
uniform vec2 u_tileCoordinate;
uniform float u_tileSize;
uniform vec4 u_borderColor;
uniform int u_isFlicker;

out vec4 FragColor;

vec3 colorWhite = vec3(1.0,1.0,1.0);
vec3 colorGold = vec3(1.000,0.833,0.224);

void main()
{
    float aspectRatio =  u_windowSize.x / u_windowSize.y;
    float targetAR = 640.0 / 480.0;
    float factor = 1.0;

    float translateX = 0.0;
    float translateY = 0.0;
    float posX = u_tileCoordinate.x;
    float posY = 480.0 - u_tileCoordinate.y;
    float sizeX = u_tileSize;
    float sizeY = u_tileSize;

    if (aspectRatio >= targetAR){
        factor = aspectRatio / targetAR;
        translateX = ((factor * 640.0) - 640.0) / 2.0;
        posX = (posX + translateX) / (640.0 * factor);
        posY = posY / 480.0;
        sizeX = sizeX / (640 * factor);
        sizeY = sizeY / 480;
    } else {
        factor = targetAR / aspectRatio;
        translateY = ((factor * 480.0) - 480.0) / 2.0;
        posX = posX / 640.0;
        posY = (posY + translateY) / (480 * factor);
        sizeX = sizeX / 640;
        sizeY = sizeY / (480 * factor);
    }

    vec2 uv = gl_FragCoord.xy / u_windowSize.xy;

    float uvX = ( uv.x - posX ) * 1 / sizeX; 
    float uvY = ( uv.y - posY ) * 1 / sizeY;

    vec2 uvTile = vec2(uvX, uvY);

    uvTile = uvTile - 0.5;
    uvTile = uvTile * 2;

    vec3 neonBlue = vec3(0.0, 1.0, 1.0);

    if (u_isFlicker == 0){
        FragColor = vec4(0.0, 0.0, 1.0, 1.0);
    } else {
        vec3 color = vec3(0.0);
        float pct = abs(sin(u_time * 2.0));

        color = mix(colorWhite, colorGold, pct);

        FragColor = vec4(color,1.0);
    }

    if (uvTile.x <= -0.9 || uvTile.x >= 0.9){
        FragColor = vec4(u_borderColor.xyz, 1.0);
    }
    if (uvTile.y <= -0.9 || uvTile.y >= 0.9){
        FragColor =  vec4(u_borderColor.xyz, 1.0);
    }
}

