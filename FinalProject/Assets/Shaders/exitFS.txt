#version 330 core

precision mediump float;
            
in vec3 out_position;
in vec3 out_translate;

out vec4 FragColor;

uniform vec2 u_windowSize;
uniform float u_time;
uniform vec2 u_tileCoordinate;
uniform float u_tileSize;

vec3 palette(float t){
    vec3 a = vec3(0.5, 0.5, 0.5);
    vec3 b = vec3(0.5, 0.5, 0.5);
    vec3 c = vec3(1.0, 1.0, 1.0);
    vec3 d = vec3(0.263, 0.416, 0.557);

    return a + b * cos(6.28318 * (c * t + d));
}

void main()
{
    float aspectRatio =  u_windowSize.x / u_windowSize.y;
    float targetAR = 640.0 / 480.0;
    float factor = 1.0;

    float translateX = 0.0;
    float translateY = 0.0;
    float posX = u_tileCoordinate.x;
    float posY = 480 - u_tileCoordinate.y;
    float sizeX = u_tileSize;
    float sizeY = u_tileSize;

    if (aspectRatio >= targetAR){
        factor = aspectRatio / targetAR;
        translateX = ((factor * 640.0) - 640.0) / 2.0;
        posX = (posX + translateX) / (640.0 * factor);
        posY = posY / 480.0;
        sizeX = sizeX / (640 * factor);
        sizeY = sizeY / 480;
    } else {
        factor = targetAR / aspectRatio;
        translateY = ((factor * 480.0) - 480.0) / 2.0;
        posX = posX / 640.0;
        posY = (posY + translateY) / (480 * factor);
        sizeX = sizeX / 640;
        sizeY = sizeY / (480 * factor);
    }

    vec2 uv = gl_FragCoord.xy / u_windowSize.xy;

    float uvX = ( uv.x - posX ) * 1 / sizeX; 
    float uvY = ( uv.y - posY ) * 1 / sizeY;

    vec2 uvTile = vec2(uvX, uvY);

    uvTile = uvTile - 0.5;
    uvTile = uvTile * 2;

    vec3 col = vec3(0.0, 1.0, 1.0);

    float d = length(uvTile);

    d = sin(d*9. + u_time) / 9.;
    d = 0.03 / d;
    col *= d;

    FragColor = vec4(col, 1.0);
}

